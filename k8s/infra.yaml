apiVersion: v1
kind: Namespace
metadata:
  name: ops
---
# RabbitMQ
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: ops
spec:
  replicas: 1
  selector: { matchLabels: { app: rabbitmq } }
  template:
    metadata: { labels: { app: rabbitmq } }
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.12-management
        ports:
        - { containerPort: 5672, name: amqp }
        - { containerPort: 15672, name: management }
        - { containerPort: 15692, name: metrics }
        env:
        - { name: RABBITMQ_DEFAULT_USER, value: guest }
        - { name: RABBITMQ_DEFAULT_PASS, value: guest }
        resources:
          requests: { cpu: "200m", memory: "256Mi" }
          limits: { cpu: "500m", memory: "512Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: ops
spec:
  selector: { app: rabbitmq }
  ports:
  - { name: amqp, port: 5672, targetPort: 5672 }
  - { name: management, port: 15672, targetPort: 15672 }
  - { name: metrics, port: 15692, targetPort: 15692 }
  type: ClusterIP
---
# Redis
apiVersion: apps/v1
kind: Deployment
metadata: { name: redis, namespace: ops }
spec:
  replicas: 1
  selector: { matchLabels: { app: redis } }
  template:
    metadata: { labels: { app: redis } }
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        args: ["--appendonly", "yes"]
        ports:
        - { containerPort: 6379, name: redis }
        resources:
          requests: { cpu: "100m", memory: "128Mi" }
          limits: { cpu: "300m", memory: "256Mi" }
---
apiVersion: v1
kind: Service
metadata: { name: redis, namespace: ops }
spec:
  selector: { app: redis }
  ports:
  - { name: redis, port: 6379, targetPort: 6379 }
---
# NATS
apiVersion: apps/v1
kind: Deployment
metadata: { name: nats, namespace: ops }
spec:
  replicas: 1
  selector: { matchLabels: { app: nats } }
  template:
    metadata: { labels: { app: nats } }
    spec:
      containers:
      - name: nats
        image: nats:2.9-alpine
        args: ["-js"]
        ports:
        - { containerPort: 4222, name: client }
        resources:
          requests: { cpu: "100m", memory: "128Mi" }
          limits: { cpu: "300m", memory: "256Mi" }
---
apiVersion: v1
kind: Service
metadata: { name: nats, namespace: ops }
spec:
  selector: { app: nats }
  ports:
  - { name: client, port: 4222, targetPort: 4222 }
---
# MongoDB
apiVersion: apps/v1
kind: Deployment
metadata: { name: mongodb, namespace: ops }
spec:
  replicas: 1
  selector: { matchLabels: { app: mongodb } }
  template:
    metadata: { labels: { app: mongodb } }
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        env:
        - { name: MONGO_INITDB_ROOT_USERNAME, value: admin }
        - { name: MONGO_INITDB_ROOT_PASSWORD, value: password }
        ports:
        - { containerPort: 27017, name: mongo }
        resources:
          requests: { cpu: "200m", memory: "256Mi" }
          limits: { cpu: "500m", memory: "512Mi" }
---
apiVersion: v1
kind: Service
metadata: { name: mongodb, namespace: ops }
spec:
  selector: { app: mongodb }
  ports:
  - { name: mongo, port: 27017, targetPort: 27017 }
---
# MySQL
apiVersion: apps/v1
kind: Deployment
metadata: { name: mysql, namespace: ops }
spec:
  replicas: 1
  selector: { matchLabels: { app: mysql } }
  template:
    metadata: { labels: { app: mysql } }
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - { name: MYSQL_ROOT_PASSWORD, value: password }
        - { name: MYSQL_DATABASE, value: robotshop }
        ports:
        - { containerPort: 3306, name: mysql }
        resources:
          requests: { cpu: "200m", memory: "256Mi" }
          limits: { cpu: "500m", memory: "512Mi" }
---
apiVersion: v1
kind: Service
metadata: { name: mysql, namespace: ops }
spec:
  selector: { app: mysql }
  ports:
  - { name: mysql, port: 3306, targetPort: 3306 }
---
# Redpanda (Kafka)
apiVersion: apps/v1
kind: Deployment
metadata: { name: redpanda, namespace: ops }
spec:
  replicas: 1
  selector: { matchLabels: { app: redpanda } }
  template:
    metadata: { labels: { app: redpanda } }
    spec:
      containers:
      - name: redpanda
        image: redpandadata/redpanda:latest
        command: ["/bin/bash","-c"]
        args:
        - |
          rpk redpanda start --mode dev-container --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
        ports:
        - { containerPort: 9092, name: kafka }
        - { containerPort: 19092, name: kafka-ext }
        - { containerPort: 9644, name: metrics }
        resources:
          requests: { cpu: "500m", memory: "512Mi" }
          limits: { cpu: "1", memory: "1Gi" }
---
apiVersion: v1
kind: Service
metadata: { name: redpanda, namespace: ops }
spec:
  selector: { app: redpanda }
  ports:
  - { name: kafka, port: 9092, targetPort: 9092 }
  - { name: kafka-ext, port: 19092, targetPort: 19092 }
  - { name: metrics, port: 9644, targetPort: 9644 }

